/***************************************************************************//**
* File Name: cycfg_gatt_db.h
*
* Description:
* Definitions for constants used in the device's GATT database and function
* prototypes.
* This file should not be modified. It was automatically generated by
* Bluetooth Configurator 2.90.0.2529
*
********************************************************************************
* Copyright 2024 Cypress Semiconductor Corporation (an Infineon company) or
* an affiliate of Cypress Semiconductor Corporation.
* SPDX-License-Identifier: Apache-2.0
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

#if !defined(CYCFG_GATT_DB_H)
#define CYCFG_GATT_DB_H

#include "stdint.h"

#define __UUID_SERVICE_GENERIC_ACCESS                                                0x1800
#define __UUID_CHARACTERISTIC_DEVICE_NAME                                            0x2A00
#define __UUID_CHARACTERISTIC_APPEARANCE                                             0x2A01
#define __UUID_SERVICE_GENERIC_ATTRIBUTE                                             0x1801
#define __UUID_CHARACTERISTIC_SERVICE_CHANGED                                        0x2A05
#define __UUID_SERVICE_BATTERY                                                       0x180F
#define __UUID_CHARACTERISTIC_BATTERY_LEVEL                                          0x2A19
#define __UUID_DESCRIPTOR_CHARACTERISTIC_PRESENTATION_FORMAT                         0x2904
#define __UUID_DESCRIPTOR_CLIENT_CHARACTERISTIC_CONFIGURATION                        0x2902

typedef enum 
{
/* Service Generic Attribute */
    HDLS_GATT                                                                    =  (0x0001),//modified by zshe  
    /* Characteristic Service Change */
    HDLC_GATT_SERVICE_CHANGED,
    HDLC_GATT_SERVICE_CHANGED_VALUE,
#define MAX_LEN_GATT_SERVICE_CHANGED                                                (0x0004)
    /* Descriptor Client Characteristic Configuration */
    HDLD_GATT_SERVICE_CHANGED_CLIENT_CHAR_CONFIG,
#define MAX_LEN_GATT_SERVICE_CHANGED_CLIENT_CHAR_CONFIG                             (0x0002)

/* Service Generic Access */
    HDLS_GAP,                                                               
    /* Characteristic Device Name */
    HDLC_GAP_DEVICE_NAME,
    HDLC_GAP_DEVICE_NAME_VALUE,
#define MAX_LEN_GAP_DEVICE_NAME                                                     (0x0010)
    /* Characteristic Appearance */
    HDLC_GAP_APPEARANCE,
    HDLC_GAP_APPEARANCE_VALUE,
#define MAX_LEN_GAP_APPEARANCE                                                      (0x0002)

//     /* Service Generic Attribute */
//     HDLS_GATT_ATTRIBUTE,

//     /* Service Battery */
//     HDLS_BAS,
//     /* Characteristic Battery Level */
//     HDLC_BAS_BATTERY_LEVEL,
//     HDLC_BAS_BATTERY_LEVEL_VALUE,
// #define MAX_LEN_BAS_BATTERY_LEVEL                                                   (0x0001)
//     /* Descriptor Characteristic Presentation Format */
//     HDLD_BAS_BATTERY_LEVEL_CHAR_PRESENTATION_FORMAT,
// #define MAX_LEN_BAS_BATTERY_LEVEL_CHAR_PRESENTATION_FORMAT                          (0x0007)
//     /* Descriptor Client Characteristic Configuration */
//     HDLD_BAS_BATTERY_LEVEL_CLIENT_CHAR_CONFIG,
// #define MAX_LEN_BAS_BATTERY_LEVEL_CLIENT_CHAR_CONFIG                                (0x0002)

    /* Service OTA FW Upgrade Service --------------------------------------------------------*/
    HDLS_OTA_FW_UPGRADE_SERVICE,
    /* Characteristic OTA Upgrade Control Point */
    HDLC_OTA_FW_UPGRADE_SERVICE_OTA_UPGRADE_CONTROL_POINT,
    HDLC_OTA_FW_UPGRADE_SERVICE_OTA_UPGRADE_CONTROL_POINT_VALUE,
#define MAX_LEN_OTA_FW_UPGRADE_SERVICE_OTA_UPGRADE_CONTROL_POINT                    (0x0001)
    /* Descriptor Client Characteristic Configuration */
    HDLD_OTA_FW_UPGRADE_SERVICE_OTA_UPGRADE_CONTROL_POINT_CLIENT_CHAR_CONFIG,
#define MAX_LEN_OTA_FW_UPGRADE_SERVICE_OTA_UPGRADE_CONTROL_POINT_CLIENT_CHAR_CONFIG (0x0002)
    /* Characteristic OTA Upgrade Data */
    HDLC_OTA_FW_UPGRADE_SERVICE_OTA_UPGRADE_DATA,
    HDLC_OTA_FW_UPGRADE_SERVICE_OTA_UPGRADE_DATA_VALUE,
#define MAX_LEN_OTA_FW_UPGRADE_SERVICE_OTA_UPGRADE_DATA                             (0x0001)

    /* Service Custom (Session Service) */
    HDLS_SESSION_SERVICE,
    /* Characteristic Device Information Char */
    HDLC_SESSION_SERVICE_DEVICE_INFORMATION_CHAR,
    HDLC_SESSION_SERVICE_DEVICE_INFORMATION_VALUE,
#define MAX_LEN_SESSION_SERVICE_DEVICE_INFORMATION_CHARACTERISTIC                   (0x0020)
    /* Descriptor Client Device Information Char Configuration */
    HDLD_SESSION_SERVICE_DEVICE_INFORMATION_CLIENT_CHAR_CONFIG,
#define MAX_LEN_SESSION_SERVICE_DEVICE_INFORMATION_CLIENT_CHAR_CONFIG               (0x0002)
    /* Characteristic Time Char */
    HDLC_SESSION_SERVICE_TIME_CHAR,
    HDLC_SESSION_SERVICE_TIME_VALUE,
#define MAX_LEN_SESSION_SERVICE_TIME_CHARACTERISTIC                                 (0x0004)
    /* Characteristic Battery Power Remaining Char */
    HDLC_SESSION_SERVICE_BATTERY_POWER_REMAINING_CHAR,
    HDLC_SESSION_SERVICE_BATTERY_POWER_REMAINING_VALUE,
#define MAX_LEN_SESSION_SERVICE_BATTERY_POWER_REMAINING_CHARACTERISTIC              (0x0003)
    /* Descriptor Client Battery Power Remaining Char Configuration */
    HDLD_SESSION_SERVICE_BATTERY_POWER_REMAINING_CLIENT_CHAR_CONFIG,
#define MAX_LEN_SESSION_SERVICE_BATTERY_POWER_REMAINING_CLIENT_CHAR_CONFIG          (0x0002)
   /* Characteristic device lock Char */
    HDLC_SESSION_SERVICE_DEVICE_LOCK_CHAR,
    HDLC_SESSION_SERVICE_DEVICE_LOCK_VALUE,
#define MAX_LEN_SESSION_SERVICE_DEVICE_LOCK_CHARACTERISTIC                          (0x0001)
    /* Descriptor Client device lock Char Configuration */
    HDLD_SESSION_SERVICE_DEVICE_LOCK_CLIENT_CHAR_CONFIG,
#define MAX_LEN_SESSION_SERVICE_DEVICE_LOCK_CLIENT_CHAR_CONFIG                      (0x0002)
    /* Characteristic session records Char */
    HDLC_SESSION_SERVICE_SESSION_RECORDS_CHAR,
    HDLC_SESSION_SERVICE_SESSION_RECORDS_VALUE,
#define MAX_LEN_SESSION_SERVICE_SESSION_RECORDS_CHARACTERISTIC                      (0x000C)
    /* Descriptor Client session records Char Configuration */
    HDLD_SESSION_SERVICE_SESSION_RECORDS_CLIENT_CHAR_CONFIG,
#define MAX_LEN_SESSION_SERVICE_SESSION_RECORDS_CLIENT_CHAR_CONFIG                  (0x0002)
    /* Characteristic session status Char */
    HDLC_SESSION_SERVICE_SESSION_STATUS_CHAR,
    HDLC_SESSION_SERVICE_SESSION_STATUS_VALUE,
#define MAX_LEN_SESSION_SERVICE_SESSION_STATUS_CHARACTERISTIC                       (0x0002)
    /* Descriptor Client session status Char Configuration */
    HDLD_SESSION_SERVICE_SESSION_STATUS_CLIENT_CHAR_CONFIG,
#define MAX_LEN_SESSION_SERVICE_SESSION_STATUS_CLIENT_CHAR_CONFIG                   (0x0002)
    /* Characteristic FindMY Device Char */
    HDLC_SESSION_SERVICE_FINDMY_DEVICE_CHAR,
    HDLC_SESSION_SERVICE_FINDMY_DEVICE_VALUE,
#define MAX_LEN_SESSION_SERVICE_FINDMY_DEVICE_CHARACTERISTIC                       (0x0002)
    /* Descriptor Client FindMY Device Char Configuration */
    HDLD_SESSION_SERVICE_FINDMY_DEVICE_CLIENT_CHAR_CONFIG,
#define MAX_LEN_SESSION_SERVICE_FINDMY_DEVICE_CLIENT_CHAR_CONFIG                   (0x0002)
    /* Characteristic SCREEN LED CONTROL Char */
    HDLC_SESSION_SERVICE_SCREEN_LED_CONTROL_CHAR,
    HDLC_SESSION_SERVICE_SCREEN_LED_CONTROL_VALUE,
#define MAX_LEN_SESSION_SERVICE_SCREEN_LED_CONTROL_CHARACTERISTIC                  (0x0001)
    /* Characteristic FACTORY RESET Char */
    HDLC_SESSION_SERVICE_FACTORY_RESET_CHAR,
    HDLC_SESSION_SERVICE_FACTORY_RESET_VALUE,
#define MAX_LEN_SESSION_SERVICE_FACTORY_RESET_CHARACTERISTIC                       (0x0001)
    /* Characteristic HEATING PROFile SELect Char */
    HDLC_SESSION_SERVICE_HEATING_PROF_SEL_CHAR,
    HDLC_SESSION_SERVICE_HEATING_PROF_SEL_VALUE,
#define MAX_LEN_SESSION_SERVICE_HEATING_PROF_SEL_CHARACTERISTIC                    (0x0003)
    /* Descriptor Client HEATING PROFile SELect Char Configuration */
    HDLD_SESSION_SERVICE_HEATING_PROF_SEL_CLIENT_CHAR_CONFIG,
#define MAX_LEN_SESSION_SERVICE_HEATING_PROF_SEL_CLIENT_CHAR_CONFIG                (0x0002)
    /* Characteristic HAPTIC SET Char */
    HDLC_SESSION_SERVICE_HAPTIC_SET_CHAR,
    HDLC_SESSION_SERVICE_HAPTIC_SET_VALUE,
#define MAX_LEN_SESSION_SERVICE_HAPTIC_SET_CHARACTERISTIC                          (0x0001)
    /* Characteristic BUZZER SPEAKER SET Char */
    HDLC_SESSION_SERVICE_BUZZER_SPEAKER_SET_CHAR,
    HDLC_SESSION_SERVICE_BUZZER_SPEAKER_SET_VALUE,
#define MAX_LEN_SESSION_SERVICE_BUZZER_SPEAKER_SET_CHARACTERISTIC                  (0x0001)
    /* Service Custom (Debug Service) */
    HDLS_DEBUG_SERVICE,
    /* Characteristic LAST ERROR Char */
    HDLC_DEBUG_SERVICE_LAST_ERROR_CHAR,
    HDLC_DEBUG_SERVICE_LAST_ERROR_VALUE,
#define MAX_LEN_DEBUG_SERVICE_LAST_ERROR_CHARACTERISTIC                            (0x0005)
    /* Descriptor Client LAST ERROR Char Configuration */  
    HDLD_DEBUG_SERVICE_LAST_ERROR_CLIENT_CHAR_CONFIG,  
#define MAX_LEN_DEBUG_SERVICE_LAST_ERROR_CLIENT_CHAR_CONFIG                        (0x0002)
    /* Characteristic EVENT LOGR Char */  
    HDLC_DEBUG_SERVICE_EVENT_LOG_CHAR,  
    HDLC_DEBUG_SERVICE_EVENT_LOG_VALUE,  
#define MAX_LEN_DEBUG_SERVICE_EVENT_LOG_CHARACTERISTIC                             (0x0018)
    /* Descriptor Client EVENT LOG Char Configuration */  
    HDLD_DEBUG_SERVICE_EVENT_LOG_CLIENT_CHAR_CONFIG,  
#define MAX_LEN_DEBUG_SERVICE_EVENT_LOG_CLIENT_CHAR_CONFIG                         (0x0002)
    /* Characteristic LIFECYCLE DATA Char */  
    HDLC_DEBUG_SERVICE_LIFECYCLE_DATA_CHAR,  
    HDLC_DEBUG_SERVICE_LIFECYCLE_DATA_VALUE,  
#define MAX_LEN_DEBUG_SERVICE_LIFECYCLE_DATA_CHARACTERISTIC                        (0x0002)
    /* Descriptor Client LIFECYCLE DATA Char Configuration */  
    HDLD_DEBUG_SERVICE_LIFECYCLE_DATA_CLIENT_CHAR_CONFIG,  
#define MAX_LEN_DEBUG_SERVICE_LIFECYCLE_DATA_CLIENT_CHAR_CONFIG                    (0x0002)
    /* Service Custom (Device Management Service) */
    HDLS_DEVICE_MANAGEMENT_SERVICE,
    /* Characteristic Version Char */
    HDLC_DEVICE_MANAGEMENT_SERVICE_VERSION_CHAR,
    HDLC_DEVICE_MANAGEMENT_SERVICE_VERSION_VALUE,
#define MAX_LEN_DEVICE_MANAGEMENT_SERVICE_VERSION_CHARACTERISTIC                   (0x000E)
    /* Characteristic CONTROL Char */
    HDLC_DEVICE_MANAGEMENT_SERVICE_CONTROL_CHAR,
    HDLC_DEVICE_MANAGEMENT_SERVICE_CONTROL_VALUE,
#define MAX_LEN_DEVICE_MANAGEMENT_SERVICE_CONTROL_CHARACTERISTIC                   (0x0001)
    /* Descriptor Client CONTROL Char Configuration */
    HDLD_DEVICE_MANAGEMENT_SERVICE_CONTROL_CLIENT_CHAR_CONFIG,
#define MAX_LEN_DEVICE_MANAGEMENT_SERVICE_CONTROL_CLIENT_CHAR_CONFIG               (0x0002)
    /* Characteristic Payload Char */
    HDLC_DEVICE_MANAGEMENT_SERVICE_PAYLOAD_CHAR,
    HDLC_DEVICE_MANAGEMENT_SERVICE_PAYLOAD_VALUE,
#define MAX_LEN_DEVICE_MANAGEMENT_SERVICE_PAYLOAD_CHARACTERISTIC                   (0x0020)
    /* Characteristic CHALLENGE Char */
    HDLC_DEVICE_MANAGEMENT_SERVICE_CHALLENGE_CHAR,
    HDLC_DEVICE_MANAGEMENT_SERVICE_CHALLENGE_VALUE,
#define MAX_LEN_DEVICE_MANAGEMENT_SERVICE_CHALLENGE_CHARACTERISTIC                 (0x0001)
    /* Descriptor Client CHALLENGE Char Configuration */
    HDLD_DEVICE_MANAGEMENT_SERVICE_CHALLENGE_CLIENT_CHAR_CONFIG,
#define MAX_LEN_DEVICE_MANAGEMENT_SERVICE_CHALLENGE_CLIENT_CHAR_CONFIG             (0x0002)
//     /* Service Custom (Age Verification Service) */
//     HDLS_AGE_VERIFICATION_SERVICE,
//     /* Characteristic AGE CHANLLENGE GENERATION Char */
//     HDLC_AGE_VERIFICATION_SERVICE_AGE_CHANLLENGE_GEN_CHAR,
//     HDLC_AGE_VERIFICATION_SERVICE_AGE_CHANLLENGE_GEN_VALUE,
// #define MAX_LEN_AGE_VERIFICATION_SERVICE_AGE_CHANLLENGE_GEN_CHARACTERISTIC         (0x0020)
//     /* Characteristic AGE SIGNATURE VERFICATION Char */
//     HDLC_AGE_VERIFICATION_SERVICE_AGE_SIGNATURE_VERF_CHAR,
//     HDLC_AGE_VERIFICATION_SERVICE_AGE_SIGNATURE_VERF_VALUE,
// #define MAX_LEN_AGE_VERIFICATION_SERVICE_AGE_SIGNATURE_VERF_CHARACTERISTIC         (0x0060)
//     /* Descriptor Client AGE SIGNATURE VERFICATION Char Configuration */
//     HDLD_AGE_VERIFICATION_SERVICE_AGE_SIGNATURE_VERF_CLIENT_CHAR_CONFIG,
// #define MAX_LEN_AGE_VERIFICATION_SERVICE_AGE_SIGNATURE_VERF_CLIENT_CHAR_CONFIG     (0x0002)
    /* Database handle MAX Setting*/
    HANDLE_MAX_NUM,
} DataBase_Handle_e;

/* OTA Update Service UUID */
#define __UUID_SERVICE_OTA_FW_UPGRADE_SERVICE                                       0x1F, 0x38, 0xA1, 0x38, 0xAD, 0x82, 0x35, 0x86, 0xA0, 0x43, 0x13, 0x5C, 0x47, 0x1E, 0x5D, 0xAE
/* OTA Update Service characteristic UUID */
#define __UUID_CHARACTERISTIC_OTA_FW_UPGRADE_SERVICE_OTA_UPGRADE_CONTROL_POINT      0x1B, 0x66, 0x6C, 0x08, 0x0A, 0x57, 0x8E, 0x83, 0x99, 0x4E, 0xA7, 0xF7, 0xBF, 0x50, 0xDD, 0xA3
#define __UUID_CHARACTERISTIC_OTA_FW_UPGRADE_SERVICE_OTA_UPGRADE_DATA               0x26, 0xFE, 0x2E, 0xE7, 0x09, 0x24, 0x4F, 0xB7, 0x91, 0x40, 0x61, 0xD9, 0x7A, 0x6C, 0xE8, 0xA2

/* Custom Service UUID */                                                                                               /* signification octets, default: 0xFF*/
#define __UUID_SERVICE_CUSTOM_SESSION_SERVICE                                       0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0A, 0x00, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C
#define __UUID_SERVICE_CUSTOM_DEBUG_SERVICE                                         0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0B, 0x00, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C
#define __UUID_SERVICE_CUSTOM_DEVICE_MANAGEMENT_SERVICE                             0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0C, 0x00, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C
#define __UUID_SERVICE_CUSTOM_AGE_VERIFICATION_SERVICE                              0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0D, 0x00, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C

/* (Session Service) characteristic UUID */                                                                             /* signification octets, default: 0xFF*/
#define __UUID_CHARACTERISTIC_DEVICE_INFORMATION_CHARACTERISTIC                     0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0A, 0x01, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C
#define __UUID_CHARACTERISTIC_TIME_CHARACTERISTIC                                   0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0A, 0x02, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C
#define __UUID_CHARACTERISTIC_BATTERY_POWER_REMAINING_CHARACTERISTIC                0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0A, 0x03, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C
#define __UUID_CHARACTERISTIC_DEVICE_LOCK_CHARACTERISTIC                            0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0A, 0x04, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C
#define __UUID_CHARACTERISTIC_SESSION_RECORDS_CHARACTERISTIC                        0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0A, 0x06, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C
#define __UUID_CHARACTERISTIC_SESSION_STATUS_CHARACTERISTIC                         0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0A, 0x07, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C
#define __UUID_CHARACTERISTIC_FINDMY_DEVICE_CHARACTERISTIC                          0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0A, 0x09, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C
#define __UUID_CHARACTERISTIC_SCREEN_LED_CONTROL_CHARACTERISTIC                     0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0A, 0x0A, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C
#define __UUID_CHARACTERISTIC_FACTORY_RESET_CHARACTERISTIC                          0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0A, 0x0B, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C
#define __UUID_CHARACTERISTIC_HEATING_PROF_SEL_CHARACTERISTIC                       0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0A, 0x0C, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C
#define __UUID_CHARACTERISTIC_HAPTIC_SET_CHARACTERISTIC                             0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0A, 0x0D, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C
#define __UUID_CHARACTERISTIC_BUZZER_SPEAKER_SET_CHARACTERISTIC                     0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0A, 0x0E, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C

/* (Debug Service) characteristic UUID */                                                                               /* signification octets, default: 0xFF*/
#define __UUID_CHARACTERISTIC_LAST_ERROR_CHARACTERISTIC                             0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0B, 0x01, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C
#define __UUID_CHARACTERISTIC_EVENT_LOG_CHARACTERISTIC                              0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0B, 0x02, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C
#define __UUID_CHARACTERISTIC_LIFECYCLE_DATA_CHARACTERISTIC                         0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0B, 0x03, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C

/* (Device Management Service) characteristic UUID */                                                                   /* signification octets, default: 0xFF*/
#define __UUID_CHARACTERISTIC_VERSION_CHARACTERISTIC                                0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0C, 0x01, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C
#define __UUID_CHARACTERISTIC_CONTROL_CHARACTERISTIC                                0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0C, 0x02, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C
#define __UUID_CHARACTERISTIC_PAYLOAD_CHARACTERISTIC                                0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0C, 0x03, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C
#define __UUID_CHARACTERISTIC_CHALLENGE_CHARACTERISTIC                              0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0C, 0x04, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C

/* (Age Verification Service) characteristic UUID */                                                                    /* signification octets, default: 0xFF*/
#define __UUID_CHARACTERISTIC_AGE_CHANLLENGE_GEN_CHARACTERISTIC                     0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0D, 0x01, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C
#define __UUID_CHARACTERISTIC_AGE_SIGNATURE_VERF_CHARACTERISTIC                     0x49, 0x34, 0x68, 0x40, 0x97, 0x1B, /**/0x0D, 0x02, 0x05, /**/0x02, 0x78, 0xE3, 0xB5, 0xC8, 0xD6, 0x6C


#pragma pack(1) // 单字节对齐, app需要同样的单字节对齐去定义结构体
/* -------------------------------------------------Service Custom (Session Service Characterristic Entry) ------------------------------------------*/
/**
  * @brief session device information char 
  * read message format
  */
typedef struct
{
	uint8_t firmware_major_version;
	uint8_t firmware_minor_version;
	uint16_t sw_revision_patch;
	uint16_t board_classification;//(HW Version)
	uint8_t serial_number[16];
	uint8_t bootloader_version;
} session_service_device_information_char_read_t;
/**
  * @brief session device information char 
  * Info Code (Write) response format
  */
typedef struct
{
	uint16_t info_code;
	uint16_t info_data;
} session_device_information_char_resp_t;
/**
  * @brief session device information char 
  * Info Code (notification) msg format
  */
typedef struct
{
	uint16_t info_code;
	uint8_t advertising_name[9];
} session_device_information_char_ntf_t;

/**
  * @brief session time char 
  * read&write message format
  */
typedef struct
{
	uint32_t time_value;
} session_service_time_char_write_read_t;

/**
  * @brief session battery_power_remaining char 
  * read&notification message format
  */
typedef struct
{
	uint8_t battery_power_value;
  uint8_t charging_state;
  uint8_t sessions_remaining;
} session_service_battery_power_remaining_char_read_ntf_t;

/**
  * @brief session device lock char 
  * read&write notification message format
  */
typedef struct
{
	uint8_t device_lock_state;
} session_service_device_lock_char_t;

/**
  * @brief session records char 
  * read&write notification message format
  */
typedef struct
{
    uint32_t count;
    uint32_t time_stamp;
    uint16_t duration;
    uint16_t session_exit_code;
    uint8_t mode;
	uint8_t heatingProfile;					// 增加该字段
//    uint16_t z1_max_temp;
//    uint16_t z2_max_temp;
//    uint16_t battery_max_temp;
    int16_t z1_max_temp;
//    int16_t z2_max_temp;
    int16_t battery_max_temp;
    uint8_t trusted;
} session_service_records_char_t;

/**
  * @brief session records SoF and EoF
  * 
  */
typedef struct
{
    uint32_t data;
    uint32_t total_records_count;
} session_service_records_xof_t;

/**
  * @brief session records exit code enumeration 
  * 
  */
typedef enum 
{
    REASON_HEATING_COMPLETED = 0,//0
    REASON_HEATING_STOPPED,
    REASON_FLT_DE_BAT_COLD,
    REASON_FLT_DE_BAT_HOT_55,
    REASON_FLT_DE_TC_ZONE1_HOT,
    REASON_FLT_DE_TC_ZONE2_HOT,
    REASON_FLT_DE_USB_HOT,
    REASON_FLT_DE_CO_COLD,
    REASON_FLT_DE_USB_COLD,
    REASON_FLT_DE_TC_ZONE1_COLD,
    REASON_FLT_DE_TC_ZONE2_COLD,
    REASON_FLT_DE_CO_HOT_SW,
    REASON_FLT_DE_BAT_DAMAGE,
    REASON_FLT_DE_BAT_DISCHARGE_CURRENT_OVER,
    REASON_FLT_DE_CO_JUNC_HOT,
    REASON_WAR_DE_CO_JUNC_COLD,
    REASON_FLT_DE_BAT_VOLTAGE_OVER,
    REASON_FLT_DE_BAT_CHARGE_CURRENT_OVER,
    REASON_FLT_DE_CIC_BAT_DAMAGE,
    REASON_WAR_DE_BAT_EMPTY,
    REASON_FLT_DE_TC_ZONE_IMBALANCE,
    REASON_FLT_DE_TC_SPIKE,
    REASON_FLT_DE_TC_ZONE1_HEATING_ABNORMAL,
    REASON_FLT_DE_TC_ZONE2_HEATING_ABNORMAL,
    REASON_FLT_DE_BAT_ISENSE_DAMAGE,
} session_service_records_exit_code_e;

/**
  * @brief session service status char 
  * read & notification message format
  */
typedef struct
{
	uint8_t session_state;
	uint8_t session_mode;
	uint8_t eos_prompt_enable;
	// uint8_t self_clean_prompt_enable;
} session_service_status_char_t;

/**
  * @brief session service status value 
  * 
  */
typedef enum 
{
	NOT_IN_SESSION = 0,
	RAMP_UP,
	IN_SESSION,
	END_OF_SESSION_WARNING,
} session_service_status_e;

/**
  * @brief session service findmy device glo char 
  * read & write, notification message format
  */
typedef struct
{
	uint8_t device_alert;
	uint8_t alert_duration;
} session_service_findmy_device_char_t;

/**
  * @brief session service screen led control char 
  * read & write message format
  */
typedef struct
{
	uint8_t brightness;
} session_service_screen_led_control_char_t;

/**
  * @brief session service factory reset char 
  * write message format
  */
typedef struct
{
	uint8_t factory_reset;
} session_service_factory_reset_char_t;

/**
  * @brief session service heating profile seletion char 
  * write read notification message format
  */
typedef struct
{
	uint8_t opcode;      
	uint8_t profile_type;    
	uint8_t profile_index;
} session_service_heating_prof_sel_char_t;

/**
  * @brief session service heating profile select opcode
  * 
  */
typedef enum 
{
    HEATING_PROF_SEL_OPCODE00 = 0x00,//Retrieve heating profiles currently assigned to base and boost.
    HEATING_PROF_SEL_OPCODE01 = 0x01,//Get index numbers of all profiles currently installed on the device.
    HEATING_PROF_SEL_OPCODE02 = 0x02,//Get configuration of current profile at a specific index.
    HEATING_PROF_SEL_OPCODE03 = 0x03,//Set the heating profile at an index for a specific mode.
    HEATING_PROF_SEL_OPCODE04 = 0x04,//Retrieve all heating profiles.
} session_service_heating_prof_sel_opcode_e;

/**
  * @brief session service haptic vibrations char 
  * write read message format
  */
typedef struct
{
	uint8_t haptic_strength;
} session_service_haptic_set_char_t;

/**
  * @brief session service buzzer speaker setting char 
  * write read message format
  */
typedef struct
{
	uint8_t loudness;
} session_service_buzzer_speaker_set_char_t;

/* -------------------------------------------------Service Custom (Debug Service Characterristic Entry) ------------------------------------------*/
// /**
//   * @brief debug service last error code
//   * 
//   */
// typedef enum 
// {
//     INTERNAL_NON_RECOVERABLE_ACTIVE     = 1,
//     FLT_DE_BAT_COLD                     = 2,
//     FLT_DE_TC_ZONE1_HOT                 = 3,
//     FLT_DE_TC_ZONE2_HOT                 = 4,
//     FLT_DE_USB_HOT                      = 5,
//     FLT_DE_CO_COLD                      = 6,
//     FLT_DE_USB_COLD                     = 7,
//     FLT_DE_TC_ZONE1_COLD                = 8,
//     FLT_DE_TC_ZONE2_COLD                = 9,
//     FLT_DE_CO_HOT_SW                    = 10,
//     FLT_DE_HW                           = 11,
//     FLT_DE_BAT_DAMAGE                   = 12,
//     FLT_DE_CIC_BAT_DAMAGE               = 13,
//     FLT_DE_BAT_DISCHARGE_CURRENT_OVER   = 14,
//     FLT_DE_CO_JUNC_HOT                  = 15,
//     WAR_DE_CO_JUNC_COLD                 = 16,
//     FLT_DE_BAT_VOLTAGE_OVER             = 17,
//     FLT_DE_BAT_CHARGE_CURRENT_OVER      = 18,
//     FLT_DE_BAT_HOT_50_CHARGING          = 19,
//     FLT_DE_CIC_CONFIG_ERROR             = 20,
//     FLT_DE_CIC_INPUT_VOLTAGE            = 21,
//     FLT_DE_CIC_TEMP_OUT_OF_RANGE        = 22,
//     FLT_DE_CIC_CHARGE_TIMEOUT           = 23,
//     FLT_DE_CIC_OUTPUT_VOLTAGE           = 24,
//     WAR_DE_CIC_COLD                     = 25,
//     WAR_DE_CIC_HOT                      = 26,
//     WAR_DE_BAT_EMPTY                    = 27,
//     WAR_STARTUP_ACTIVE                  = 28,
//     FLT_DE_TC_SPIKE                     = 29,
//     FLT_DE_BAT_HOT_55                   = 30,
//     FLT_DE_TC_ZONE1_HEATING_ABNORMAL    = 31,
//     FLT_DE_TC_ZONE2_HEATING_ABNORMAL    = 32,
//     FLT_DE_BAT_ISENSE_DAMAGE            = 33,
//     FLT_DE_BAT_HOT_50_PRE_SES           = 34,
//     WAR_DE_BAT_LOW                      = 35,
//     FLT_DE_TC_ZONE_IMBALANCE            = 36,
// } debug_service_last_error_code_e;

/**
  * @brief debug service last error char 
  * read & notification message format
  */
typedef struct
{
//	uint16_t error_code;//uint32_t count;
//	uint16_t counter;//uint32_t timestamp;
//	uint8_t status;//uint8_t error_code;
	uint32_t timestamp;
	uint16_t error_code;
} debug_service_last_error_char_t;

/**
  * @brief debug service event log char 
  * write read & notification message format
  */
typedef struct
{
	uint32_t count;
	uint32_t timestamp;
	uint8_t event_code;
	uint8_t event_data[15];
} debug_service_event_log_char_t;

/**
  * @brief debug service life cycle data char 
  * write read & notification message format
  */
typedef struct
{
	uint8_t opcode;
	uint8_t *parameter;
} debug_service_lifecycle_data_char_t;

/**
  * @brief  debug service life cycle opcode01 type
  * 
  */
typedef enum 
{
    MIN_BAT_TEMP             = 0x00,
    MAX_BAT_TEMP             = 0x01,
    MIN_BAT_VOL              = 0x02,
    MAX_BAT_VOL              = 0x03,
    MAX_BAT_CHARGE_CURRENT   = 0x04,
    MAX_BAT_DISCHARGE_CURRENT= 0x05,
    TOTAL_CHARGE_TIME        = 0x06,
    FULLY_CHARGED_COUNT      = 0x07,
    COMPLETE_SESSION         = 0x08,
    INCOMPLETE_SESSION       = 0x09,
    MIN_ZONE1_TEMP           = 0x0A,
    MAX_ZONE1_TEMP           = 0x0B,
//    MIN_ZONE2_TEMP           = 0x0C,
//    MAX_ZONE2_TEMP           = 0x0D,
} debug_service_lifecycle_data_opcode01_type_e;

/**
  * @brief debug service life cycle rsp parameter 
  * 
  */
typedef struct
{
    int16_t Min_battery_temperature;
    int16_t Max_battery_temperature;
    uint16_t Min_battery_voltage;
    uint16_t Max_battery_voltage;
    int16_t Max_battery_charge_current;
    int16_t Max_battery_discharge_current;
    uint32_t Total_charge_time;
    uint32_t No_of_fully_charged_count;
    uint32_t No_of_complete_session;
    uint32_t No_of_incomplete_session;
    int16_t Min_Zone1_temperature;
    int16_t Max_Zone1_temperature;
//    int16_t Min_Zone2_temperature;
//    int16_t Max_Zone2_temperature;
} debug_service_lifecycle_data_opcode01_rsp_t;

/* -------------------------------------------------Service Custom (Device Management Service Characterristic Entry) ------------------------------------------*/
/**
  * @brief Device Management version char 
  * write message format
  */
typedef struct
{
	uint8_t major_version;
	uint8_t minor_version;
	uint16_t sw_revision_patch;
	uint32_t object_length;
	uint8_t object_id;
	uint8_t object_md5[5];
} device_management_service_version_char_t;

/**
  * @brief  Device Management object id
  * 
  */
typedef enum 
{
    MARKET_SPEC_SOFT_OBJECT     = 0x00,// Market Specific Software
    HEATING_PROFILE_OBJECT      = 0x01,// Heating Profile Payload 
    SCREEN_CONFIG_OBJECT        = 0x02,// Screen Configuration
} device_management_service_version_object_id_e;

/**
  * @brief Device Management control char 
  * write notify message format
  */
typedef struct
{
	uint8_t control_opcode;
} device_management_service_control_char_t;
/**
  * @brief  Device Management control status
  * 
  */
typedef enum 
{
    CONTROL_START             = 0x01,// device to mobile phone!
    CONTROL_NEXT_PAYLOAD      = 0x02,// device to mobile phone!
    CONTROL_TRANSFER_COMPLETE = 0x03,// mobile phone to device!
    CONTROL_SUCCESS           = 0x04,// device to mobile phone!
    CONTROL_ERROR             = 0x05,// device to mobile phone!
} device_management_service_control_status_e;


/**
  * @brief Device Management challenge char 
  * write notify message format
  */
typedef struct
{
	uint8_t payload_code[2];
	uint8_t random_data[30];
} device_management_service_challenge_char_t;

#pragma pack()

/* External Lookup Table Entry */
typedef struct
{
    uint16_t handle;
    uint16_t max_len;
    uint16_t cur_len;
    uint8_t  *p_data;
} gatt_db_lookup_table_t;

/* External definitions */
extern const uint8_t  gatt_database[];
extern const uint16_t gatt_database_len;
extern gatt_db_lookup_table_t app_gatt_db_ext_attr_tbl[];
extern const uint16_t app_gatt_db_ext_attr_tbl_size;
extern uint8_t app_gap_device_name[16];
extern const uint16_t app_gap_device_name_len;
extern uint8_t app_gap_appearance[];
extern const uint16_t app_gap_appearance_len;
extern uint8_t app_gatt_service_changed[];
extern const uint16_t app_gatt_service_changed_len;
extern uint8_t app_gatt_service_changed_client_char_config[];
extern const uint16_t app_gatt_service_changed_client_char_config_len;
extern uint8_t app_bas_battery_level[];
extern const uint16_t app_bas_battery_level_len;
extern uint8_t app_bas_battery_level_char_presentation_format[];
extern const uint16_t app_bas_battery_level_char_presentation_format_len;
extern uint8_t app_bas_battery_level_client_char_config[];
extern const uint16_t app_bas_battery_level_client_char_config_len;
/* External definitions - ota firmware upgrade service */
extern uint8_t app_ota_fw_upgrade_service_ota_upgrade_control_point[];
extern const uint16_t app_ota_fw_upgrade_service_ota_upgrade_control_point_len;
extern uint8_t app_ota_fw_upgrade_service_ota_upgrade_control_point_client_char_config[];
extern const uint16_t app_ota_fw_upgrade_service_ota_upgrade_control_point_client_char_config_len;
extern uint8_t app_ota_fw_upgrade_service_ota_upgrade_data[];
extern const uint16_t app_ota_fw_upgrade_service_ota_upgrade_data_len;
/* External definitions - session service characteristic */
extern session_service_device_information_char_read_t app_session_service_ext_device_information_char[];
// extern const uint16_t app_session_service_ext_device_information_char_len;
extern uint8_t app_session_service_device_information_client_char_config[];
// extern const uint16_t app_session_service_device_information_client_char_config_len;
extern session_service_time_char_write_read_t app_session_service_ext_time_char[];
extern const uint16_t app_session_service_ext_time_char_len;
extern session_service_battery_power_remaining_char_read_ntf_t app_session_service_ext_battery_power_remaining_char[];
extern const uint16_t app_session_service_ext_battery_power_remaining_char_len;
extern uint8_t app_session_service_battery_power_remaining_client_char_config[];
extern session_service_device_lock_char_t app_session_service_ext_device_lock_char[];
extern const uint16_t app_session_service_ext_device_lock_char_len;
extern uint8_t app_session_service_device_lock_client_char_config[];
extern session_service_records_char_t app_session_service_ext_records_char[];
extern const uint16_t app_session_service_ext_records_char_len;
extern uint8_t app_session_service_session_records_client_char_config[];
extern session_service_status_char_t app_session_service_ext_status_char[];
extern const uint16_t app_session_service_ext_status_char_len;
extern uint8_t app_session_service_session_status_client_char_config[];
extern session_service_findmy_device_char_t app_session_service_ext_findmy_device_char[];
extern const uint16_t app_session_service_ext_findmy_device_char_len;
extern uint8_t app_session_service_findmy_device_client_char_config[];
extern session_service_screen_led_control_char_t app_session_service_ext_screen_led_control_char[];
extern session_service_haptic_set_char_t app_session_service_ext_haptic_set_char[];
extern const uint16_t app_session_service_ext_haptic_set_char_len;
extern session_service_buzzer_speaker_set_char_t app_session_service_ext_buzzer_speaker_set_char[];
extern const uint16_t app_session_service_ext_buzzer_speaker_set_char_len;

extern debug_service_last_error_char_t app_debug_service_ext_last_error_char[];
extern debug_service_event_log_char_t app_debug_service_ext_event_log_char[];
extern debug_service_lifecycle_data_char_t app_debug_service_ext_lifecycle_data_char[];
extern const uint16_t app_debug_service_ext_last_error_char_len;
extern const uint16_t app_debug_service_ext_event_log_char_len;
extern const uint16_t app_debug_service_ext_lifecycle_data_char_len;
extern uint8_t app_debug_service_last_error_char_config[];
extern uint8_t app_debug_service_event_log_char_config[];
extern uint8_t app_debug_service_lifecycle_data_char_config[];
extern uint8_t app_session_service_heating_prof_sel_client_char_config[];

extern uint8_t app_device_management_service_control_char_config[];
extern uint8_t app_device_management_service_challenge_char_config[];



#endif /* CYCFG_GATT_DB_H */
